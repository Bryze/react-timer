{"version":3,"sources":["webpack:///../docs/live-editor.jsx","webpack:///../docs/playground.mdx","webpack:///../src/index.js"],"names":["Editor","code","trim","scope","ReactTimer","style","caretColor","background","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","isMDXComponent","children","start","end","interval","onEnd","onTick","useState","value","setValue","timerRef","useRef","useEffect","setInterval","clearInterval","PropTypes","func"],"mappings":"6LASMA,EAAS,WAcb,OACE,YAAC,IAAD,CAAcC,KATN,mOASiBC,OAAQC,MAAO,CAAEC,iBACxC,mBAAKC,MAfe,CACtBC,WAAY,QACZC,WAAY,oBAcR,YAAC,IAAD,OAEF,uBACE,YAAC,IAAD,MACA,YAAC,IAAD,SAMOP,I,4bC3BR,IAAMQ,EAAe,Q,oKAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,6DAEA,YAAC,EAAD,CAAQA,QAAQ,Y,2JAKpBH,EAAWI,gBAAiB,G,kEClCtBZ,EAAa,SAAC,GAOb,IANLa,EAMI,EANJA,SAMI,IALJC,aAKI,MALI,EAKJ,MAJJC,WAII,MAJE,qBAIF,MAHJC,gBAGI,MAHO,IAGP,MAFJC,aAEI,MAFI,aAEJ,MADJC,cACI,MADK,aACL,IACsBC,mBADtB,GACGC,EADH,KACUC,EADV,KAEEC,EAAWC,mBAkBjB,OAhBAC,qBAAU,WACHF,EAAL,UACEA,UAAmBG,aAAY,WAC7BJ,GAAS,mBAASH,EAAT,QADXI,IAIEP,EAAJ,KACEW,cAAcJ,EAAdI,SACAT,QAED,CAACF,EAAI,EAAL,IAVHS,IAYAA,qBAAU,kBAAM,WACdE,cAAcJ,EAAdI,YADFF,IAIOX,EAAP,IAGFb,YAAuB,CACrBa,SAAUc,SADW,WAErBb,MAAOa,WAFc,WAGrBZ,IAAKY,SAHgB,WAIrBX,SAAUW,IAJW,OAKrBT,OAAQS,IALa,KAMrBV,MAAOU,IAAUC,MAGnB,M","file":"component---docs-playground-mdx-fd550381e110de6f326f.js","sourcesContent":["import React from 'react';\nimport {\n  LiveProvider,\n  LiveEditor,\n  LiveError,\n  LivePreview,\n} from 'react-live';\nimport ReactTimer from '../src/index';\n\nconst Editor = () => {\n  const liveEditorStyle = {\n    caretColor: 'white',\n    background: 'rgb(32, 35, 42)',\n  };\n\n  const code = `\n    <ReactTimer\n    start={0}\n    end={(value) => value === 30}\n    onEnd={(value) => console.log('ENDED WITH VALUE', value)}\n    onTick={(value) => value + 1}>\n        {(time) => <div>{time}</div>}\n    </ReactTimer>`;\n  return (\n    <LiveProvider code={code.trim()} scope={{ ReactTimer }}>\n      <div style={liveEditorStyle}>\n        <LiveEditor />\n      </div>\n      <div>\n        <LiveError />\n        <LivePreview />\n      </div>\n    </LiveProvider>\n  );\n};\n\nexport default Editor;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/xendora/react-timer/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport Editor from './live-editor';\nimport ReactTimer from '../src/index';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h1>\n    <p>{`Test your own timer component here: `}</p>\n\n    <Editor mdxType=\"Editor\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nconst ReactTimer = ({\n  children,\n  start = 0,\n  end = () => true,\n  interval = 1000,\n  onEnd = () => { },\n  onTick = () => { },\n}) => {\n  const [value, setValue] = useState(start);\n  const timerRef = useRef();\n\n  useEffect(() => {\n    if (!timerRef.current) {\n      timerRef.current = setInterval(() => {\n        setValue((val) => onTick(val));\n      }, interval);\n    }\n    if (end(value)) {\n      clearInterval(timerRef.current);\n      onEnd(value);\n    }\n  }, [end, interval, onEnd, onTick, value]);\n\n  useEffect(() => () => {\n    clearInterval(timerRef.current);\n  }, []);\n\n  return children(value);\n};\n\nReactTimer.propTypes = {\n  children: PropTypes.func.isRequired,\n  start: PropTypes.number.isRequired,\n  end: PropTypes.func.isRequired,\n  interval: PropTypes.number,\n  onTick: PropTypes.func,\n  onEnd: PropTypes.func,\n};\n\nexport default ReactTimer;\n"],"sourceRoot":""}